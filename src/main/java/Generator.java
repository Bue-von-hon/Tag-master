import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.stream.Stream;

import identifier.Identifier;

public class Generator {

    /**
     * Generates an ID with the given prefix and identifier.
     *
     * <p>The generated ID will include a prefix and an identifier. The prefix is intended to be a server
     * or user-name, while the identifier is generated by the specified Identifier algorithm (e.g., ULID,
     * UUID, etc.). The result will be a byte array containing the lengths of the prefix and identifier,
     * followed by the prefix and identifier themselves.
     *
     * <p>The format of the resulting byte array is as follows:
     * [prefix length (1 byte), prefix (variable length), identifier length (1 byte), identifier (variable length)]
     *
     * <p>The prefix have a maximum length of 64 bytes and identifier have a maximum length of 32 bytes.
     *
     * @param prefix the string prefix to be included in the ID
     * @param algorithm the Identifier algorithm to generate the identifier
     * @return a byte array containing the generated ID
     */
    public byte[] getId(final String prefix, final Identifier algorithm) {
        // Use an algorithm to generate an identifier.
        final String identifier = algorithm.generate();

        if (prefix.length() > 64 || identifier.length() > 32) {
            throw new IllegalArgumentException("The prefix and identifier must not exceed 255 characters in length.");
        }

        // Find the length of the prefix and identifier.
        final byte prefixLength = (byte) prefix.length();
        final byte identifierLength = (byte) identifier.length();

        // Convert the prefix and identifier to a byte array.
        final byte[] prefixBytes = prefix.getBytes(StandardCharsets.UTF_8);
        final byte[] identifierBytes = identifier.getBytes(StandardCharsets.UTF_8);

        // Create the resulting array and use the stream to sequentially copy the length of the prefix,
        // the length of the prefix, the length of the identifier, and the identifier.
        final ByteBuffer result = ByteBuffer.allocate(1 + 64 + 1 + 32);
        Stream.of(
                new byte[]{prefixLength},
                prefixBytes,
                new byte[]{identifierLength},
                identifierBytes
        ).forEach(result::put);

        return result.array();
    }
}
